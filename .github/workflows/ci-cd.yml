name: Backend CI/CD

on:
  pull_request:
    types: [ opened, synchronize, closed ]
    branches: [ dev, main ]
    paths:
      - 'src/**'
      - '.github/**'

jobs:
  test:
    # PR Ïó¥Î¶¨Í±∞ÎÇò(PR ÏÉùÏÑ±), ÏóÖÎç∞Ïù¥Ìä∏(Ìë∏Ïãú/ÏàòÏ†ï)Îê†Îïå Ïã§Ìñâ
    if: github.event.action == 'opened' || github.event.action == 'synchronize'
    runs-on: ubuntu-latest
    environment: test
    steps:
      - name: Checkout the code
        uses: actions/checkout@v4
      - name: Set up jdk17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew\
      - name: Execute test
        env:
          # test Ìå®ÌÇ§ÏßÄ ÌïòÏúÑ application.yml ÎØºÍ∞ê Ï†ïÎ≥¥ Ï∂îÍ∞Ä
          DB_DRIVER: "org.h2.Driver"
          DB_URL: "jdbc:h2:mem:testdb;MODE=MYSQL"
          DB_USERNAME: "sa"
        run: ./gradlew test --info

  set-environment:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-environment.outputs.environment }}
    steps:
      - name: Set env
        id: set-environment
        run: |
          echo "Target Branch -> ${{ github.base_ref }}"
          echo "environment=dev" >> $GITHUB_OUTPUT
          
          if [[ ${{ github.base_ref }} == "main" ]]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
          fi
      - name: Check env
        run: echo "Current environment -> ${{ steps.set-environment.outputs.environment }}"

  image-build:
    runs-on: ubuntu-latest
    needs: [ set-environment ]
    permissions:
      id-token: write
      contents: read
    strategy:
      matrix:
        environment: [ "${{ needs.set-environment.outputs.environment }}" ]
    environment: ${{matrix.environment}}
    steps:
      - name: Checkout the code
        uses: actions/checkout@v4
      - name: Set up jdk17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew\
      - name: Build with gradle
        run: ./gradlew bootJar -Pspring.profiles.active=${{ matrix.environment }} --info
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: 'true'
      - name: Docker build & push
        run: |
          docker build --build-arg SPRINGBOOT_APP_PROFILE=${{ matrix.environment }} --platform linux/arm64 -f docker/Dockerfile --tag ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:${{ github.sha }} .
          docker push ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: [ set-environment, image-build ]
    strategy:
      matrix:
        environment: [ "${{needs.set-environment.outputs.environment}}" ]
    environment: ${{matrix.environment}}
    steps:
      - name: Checkout the code
        uses: actions/checkout@v4
      - name: Deploy new Spring Boot Application
        id: deploy-status
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            cd ~/project
            
            # create .env file
            cat <<EOF > .env
            # springboot-app environment
            SPRINGBOOT_APP_IMAGE_REPOSITORY=${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}
            SPRINGBOOT_APP_IMAGE_TAG=${{ github.sha }}
            ENVIRONMENT=${{ matrix.environment }}
            
            # mysql environment
            DB_NAME=${{ secrets.DB_NAME }}
            DB_USERNAME=${{ secrets.DB_USERNAME }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DB_URL=${{ secrets.DB_URL }}
            
            # AWS
            AWS_REGION=${{ secrets.AWS_REGION }}
            AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}
            AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }}
            # etc...
            EOF
            
            # deploy with docker
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | sudo docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}
            sudo docker-compose stop springboot-app
            sudo docker-compose rm -f springboot-app
            sudo docker images --filter=reference="*/springboot-app-${{ matrix.environment }}:*" -q | xargs -r sudo docker rmi -f
            sudo docker-compose up -d springboot-app
            
            sudo rm -rf .env

      - name: notify
        if: always()
        uses: tsickert/discord-webhook@v7.0.0
        with:
          webhook-url: ${{ secrets.DISCORD_WEBHOOK_URL }}
          embed-title: "Backend Î∞∞Ìè¨ Í≤∞Í≥º ÏïåÎ†§ÎìúÎ¶ΩÎãàÎã§ üòÅ"
          embed-description: |
            Ï∫°Ïä§ÌÜ§ Îã§ ÎÅùÎÇº Ïàò ÏûàÏùÑÍπå?..
            Environment : backend-${{ matrix.environment }}
            Result : ${{ steps.deploy-status.outcome == 'success' && '‚úÖ ÏÑ±Í≥µ!' || '‚ùå Ïã§Ìå®!' }}
          embed-color: ${{ steps.deploy-status.outcome == 'success' && '3066993' || '15158332' }}
